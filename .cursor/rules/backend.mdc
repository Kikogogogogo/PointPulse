---
description: 
globs: 
alwaysApply: true
---
# API Documentation

## Table of Contents

Read the entire backend documentation carefully! I have already completed the backend part. The backend port is localhost:8000.

The specifications of each API endpoint and its supported HTTP methods are described in detail. Please follow the API description guidelines below:

1. Users
   - POST /users
   - GET /users
   - GET /users/:userId (Cashier+)
   - GET /users/:userId (Manager+)
   - PATCH /users/:userId
   - PATCH /users/me
   - GET /users/me
   - PATCH /users/me/password
2. Authentication
   - POST /auth/tokens
   - POST /auth/resets
   - POST /auth/resets/:resetToken
3. Transactions
   - POST /transactions (Purchase)
   - POST /transactions (Adjustment)
   - GET /transactions
   - GET /transactions/:transactionId
   - PATCH /transactions/:transactionId/suspicious
   - POST /users/:userId/transactions (Transfer)
   - POST /users/me/transactions (Redemption)
   - GET /users/me/transactions
   - PATCH /transactions/:transactionId/processed
4. Events
   - POST /events
   - GET /events (Regular+)
   - GET /events (Manager+)
   - GET /events/:eventId (Regular+)
   - GET /events/:eventId (Manager+ or Organizer)
   - PATCH /events/:eventId
   - DELETE /events/:eventId
   - POST /events/:eventId/organizers
   - DELETE /events/:eventId/organizers/:userId
   - POST /events/:eventId/guests
   - DELETE /events/:eventId/guests/:userId
   - POST /events/:eventId/guests/me
   - DELETE /events/:eventId/guests/me
   - POST /events/:eventId/transactions (Reward)
5. Promotions
   - POST /promotions
   - GET /promotions (Regular+)
   - GET /promotions (Manager+)
   - GET /promotions/:promotionId (Regular+)
   - GET /promotions/:promotionId (Manager+)
   - PATCH /promotions/:promotionId
   - DELETE /promotions/:promotionId

---
## /users

**Method:** POST  
**Description:** Register a new user  
**Clearance:** Cashier or higher  

**Payload:**  
Field | Required | Type   | Description
----- | -------- | ------ | ------------------------------
utorid | Yes | string | Unique, Alphanumeric, 8 characters
name   | Yes | string | 1-50 characters
email  | Yes | string | Unique, Valid University of Toronto email

**Response:**  
201 Created on success 

{ "id": 1, "utorid": "johndoe1", "name": "John Doe", "email": "john.doe@mail.utoronto.ca", "verified": false, "expiresAt": "2025-03-10T01:41:47.000Z", "resetToken": "ad71d4e1-8614-46aa-b96f-cb894e346506" }

409 Conflict if the user with that utorid already exists  

Upon account creation, an email with an activation link will be sent to the provided email address (see POST /auth/resets/:resetId). The activation link expires in 7 days, after which, the user can request for a password reset to attempt activation again.

For this assignment, you are not expected to send emails, so the response body also contains the token that can be used to activate the account.

---

**Method:** GET  
**Description:** Retrieve a list of users  
**Clearance:** Manager or higher  

**Payload:**  
Field     | Required | Type    | Description
--------- | -------- | ------- | ------------------------------------------------------
name      | No       | string  | Filter by utorid or name
role      | No       | string  | Filter by user role
verified  | No       | boolean | Filter by verified status
activated | No       | boolean | Filter by whether the user has ever logged in before
page      | No       | number  | Page number for pagination (default is 1)
limit     | No       | number  | Number of objects per page (default is 10)

**Response:**

{ "count": 51, "results": [ { "id": 1, "utorid": "johndoe1", "name": "John Doe", "email": "john.doe@mail.utoronto.ca", "birthday": "2000-01-01", "role": "regular", "points": 0, "createdAt": "2025-02-22T00:00:00.000Z", "lastLogin": null, "verified": false, "avatarUrl": null }, // More user objects... ] }


---

### /users/:userId

**Method:** GET  
**Description:** Retrieve a specific user  
**Clearance:** Cashier or higher  

**Payload:** None  

**Response:**  

{ "id": 1, "utorid": "johndoe1", "name": "John Doe", "points": 0, "verified": false, "promotions": [ { "id" : 2, "name" : "Buy a pack of Pepsi", "minSpending": null, "rate": null, "points": 20 } ] }

Note that the cashier can only see limited information regarding the user. promotions should only show one-time promotions that are still available to the user, i.e., they have not used those promotions yet.

---

**Method:** GET  
**Description:** Retrieve a specific user  
**Clearance:** Manager or higher  

**Payload:** None  

**Response:**

Note that the cashier can only see limited information regarding the user. promotions should only show one-time promotions that are still available to the user, i.e., they have not used those promotions yet.

---

**Method:** GET  
**Description:** Retrieve a specific user  
**Clearance:** Manager or higher  

**Payload:** None  

**Response:**

{ "id": 1, "utorid": "johndoe1", "name": "John Doe", "email": "john.doe@mail.utoronto.ca", "birthday": "2000-01-01", "role": "regular", "points": 0, "createdAt": "2025-02-22T00:00:00.000Z", "lastLogin": "2025-02-22T00:00:00.000Z", "verified": false, "avatarUrl": null, "promotions": [ { "id" : 2, "name" : "Buy a pack of Pepsi", "minSpending": null, "rate": null, "points": 20 } ] }


---

**Method:** PATCH  
**Description:** Update a specific user's various statuses and some information  
**Clearance:** Manager or higher  

**Payload:**  
Field     | Required | Type    | Description
--------- | -------- | ------- | -----------------------------------------------------------------------------------------------------------------------------------------------------
email     | No       | string  | In case it was entered incorrectly during registration
verified  | No       | boolean | Should always be set to true
suspicious| No       | boolean | true or false
role      | No       | string  | As Manager: Either "cashier" or "regular". As Superuser: Any of "regular", "cashier", "manager", or "superuser"

**Response:** (only the field(s) that were updated will be returned)

{ "id": 1, "utorid": "johndoe1", "name": "John Doe", "suspicious": true }

When promoting a user to a cashier, the initial value for suspicious should be false.

---

### /users/me

**Method:** PATCH  
**Description:** Update the current logged-in user's information  
**Clearance:** Regular or higher  

**Payload:**  
Field    | Required | Type   | Description
-------- | -------- | ------ | ----------------------------------------------
name     | No       | string | 1-50 characters
email    | No       | string | Unique, Valid UofT email
birthday | No       | string | A date in the format of YYYY-MM-DD
avatar   | No       | file   | Image file for the user's avatar

**Response:**

{ "id": 1, "utorid": "johndoe1", "name": "John Doe", "email": "john.doe@mail.utoronto.ca", "birthday": "2000-01-01", "role": "regular", "points": 0, "createdAt": "2025-02-22T00:00:00.000Z", "lastLogin": "2025-02-22T00:00:00.000Z", "verified": true, "avatarUrl": "/uploads/avatars/johndoe1.png" }


---

**Method:** GET  
**Description:** Retrieve the current logged-in user's information  
**Clearance:** Regular or higher  

**Payload:** None  

**Response:**

{ "id": 1, "utorid": "johndoe1", "name": "John Doe", "email": "john.doe@mail.utoronto.ca", "birthday": "2000-01-01", "role": "regular", "points": 0, "createdAt": "2025-02-22T00:00:00.000Z", "lastLogin": "2025-02-22T00:00:00.000Z", "verified": true, "avatarUrl": "/uploads/avatars/johndoe1.png", "promotions": [] }


---

### /users/me/password

**Method:** PATCH  
**Description:** Update the current logged-in user's password  
**Clearance:** Regular or higher  

**Payload:**  
Field | Required | Type   | Description
----- | -------- | ------ | --------------------------------------------------------------------------------------
old   | Yes      | string | The user's current password
new   | Yes      | string | 8-20 characters, at least one uppercase, one lowercase, one number, one special character

**Response:**
200 OK on success  
403 Forbidden if the provided current password is incorrect

---

## /auth/tokens

**Method:** POST  
**Description:** Authenticate a user and generate a JWT token  
**Clearance:** Any  

**Payload:**  
Field  | Required | Type   | Description
------ | -------- | ------ | --------------------------------------
utorid | Yes      | string | The utorid of a user
password | Yes    | string | The password of the user with the specified utorid

**Response:**

{ "token": "jwt_token_here", "expiresAt": "2025-03-10T01:41:47.000Z" }


---

## /auth/resets

**Method:** POST  
**Description:** Request a password reset email.  
**Clearance:** Any  

**Payload:**  
Field  | Required | Type   | Description
------ | -------- | ------ | -------------------------------------------
utorid | Yes      | string | The utorid of a user who forgot their password

**Response:**  
202 Accepted on success  

{ "expiresAt": "2025-03-01T01:41:47.000Z", "resetToken": "ad71d4e1-8614-46aa-b96f-cb894e346506" }

429 Too Many Requests if another request is made from the same IP address within 60 seconds.  

If an account with the specified utorid exists, an email with a password reset link will be sent to the user's email address (see POST /auth/resets/:resetToken). The password reset link expires in 1 hour.

For this assignment, you are not expected to send emails, so the response body also contains the token that can be used to reset password.

---

### /auth/resets/:resetToken

**Method:** POST  
**Description:** Reset the password of a user given a reset token.  
**Clearance:** Any  

**Payload:**  
Field    | Required | Type   | Description
-------- | -------- | ------ | --------------------------------------------------------------------------------------
utorid   | Yes      | string | The utorid of a user who requested a password reset
password | Yes      | string | 8-20 characters, at least one uppercase, one lowercase, one number, one special character

**Response:**  
200 OK on success  
404 Not Found if the reset token does not exist  
410 Gone if the reset token expired  

---

## /transactions

**Method:** POST  
**Description:** Create a new purchase transaction.  
**Clearance:** Cashier or higher  

**Payload:**  
Field        | Required | Type   | Description
------------ | -------- | ------ | -------------------------------------------------
utorid       | Yes      | string | The utorid of the customer making a purchase
type         | Yes      | string | Must be "purchase"
spent        | Yes      | number | The dollar amount spent in this transaction. Must be a positive numeric value.
promotionIds | No       | array  | The IDs of promotions to apply to this transaction
remark       | No       | string | Any remark regarding this transaction

**Response:**
201 Created on success  

{ "id": 123, "utorid": "johndoe1", "type": "purchase", "spent": 19.99, "earned": 80, "remark": "", "promotionIds": [42], "createdBy": "alice666" }

400 Bad Request when any of the specified promotion IDs are invalid for any reason.

After a purchase is made, the earned amount is automatically added to the user's points balance, unless the cashier processing the transaction is flagged as suspicious. For a regular purchase transaction without additional promotions, the rate of earning points is 1 point per 25 cents spent (rounded to nearest integer).

---

**Method:** POST  
**Description:** Create a new adjustment transaction.  
**Clearance:** Manager or higher  

**Payload:**  
Field        | Required | Type   | Description
------------ | -------- | ------ | --------------------------------------------------------
utorid       | Yes      | string | The utorid of the user whose previous transaction is being adjusted
type         | Yes      | string | Must be "adjustment"
amount       | Yes      | number | The point amount adjusted in this transaction
relatedId    | Yes      | number | The ID of the related transaction
promotionIds | No       | array  | The IDs of promotions to apply to this transaction
remark       | No       | string | Any remark regarding this transaction

**Response:**
201 Created on success  

{ "id": 125, "utorid": "johndoe1", "amount": -40, "type": "adjustment",
"relatedId": 123, "remark": "", "promotionIds": [], "createdBy": "smithw42" }

Once an adjustment is made, the amount is automatically reflected in the user's points balance.

---

**Method:** GET  
**Description:** Retrieve a list of transactions  
**Clearance:** Manager or higher  

**Payload:**  
Field       | Required | Type    | Description
----------- | -------- | ------- | --------------------------------------------------------------------------------------
name        | No       | string  | Filter by utorid or name
createdBy   | No       | string  | Filter by the user who created the transaction
suspicious  | No       | boolean | Filter by whether the transaction is flagged as suspicious
promotionId | No       | number  | Filter by a promotion applied to the transaction
type        | No       | string  | Filter by transaction type (can be used without relatedId)
relatedId   | No       | number  | Filter by related ID (must be used with type)
amount      | No       | number  | Filter by point amount (must be used with operator)
operator    | No       | string  | One of "gte" (greater than or equal) or "lte" (less than or equal)
page        | No       | number  | Page number for pagination (default is 1)
limit       | No       | number  | Number of objects per page (default is 10)

**Response:**

{ "count": 21, "results": [ { "id": 123, "utorid": "johndoe1", "amount": 80, "type": "purchase", "spent": 19.99, "promotionIds": [], "suspicious": false, "remark": "", "createdBy": "alice666" }, { "id": 124, "utorid": "johndoe1", "amount": -1000, "type": "redemption", // see POST /users/me/transactions for redemption transactions "relatedId": 666, "promotionIds": [], "redeemed": 1000, "remark": "", "createdBy": "johndoe1" }, { "id": 125, "utorid": "johndoe1", "amount": -40, "type": "adjustment", "relatedId": 123, "promotionIds": [], "suspicious": false, "remark": "", "createdBy": "smithw42" }, // More transaction objects... ] }

For the relatedId field, its value will be dependent on the type of the transaction:
- **Adjustment**: the ID of the transaction for which the adjustment is being made to.
- **Transfer**: the ID of the other user, i.e., for the sender's transaction, relatedId is the ID of the receiver; for the receiver's transaction, relatedId is the ID of the sender.
- **Redemption**: the user ID of the cashier who processed the redemption -- can be null if the redemption has not been processed yet.
- **Event**: the ID of the event from which points were disbursed.

---

### /transactions/:transactionId

**Method:** GET  
**Description:** Retrieve a single transaction  
**Clearance:** Manager or higher  

**Payload:** None  

**Response:**

{ "id": 123, "utorid": "johndoe1", "type": "purchase", "spent": 19.99, "amount": 80, "promotionIds": [], "suspicious": false, "remark": "", "createdBy": "alice666" }


---

### /transactions/:transactionId/suspicious

**Method:** PATCH  
**Description:** Set or unset a transaction as being suspicious  
**Clearance:** Manager or higher  

**Payload:**  
Field       | Required | Type    | Description
----------- | -------- | ------- | ---------------------
suspicious  | Yes      | boolean | true or false

**Response:**

{ "id": 123, "utorid": "johndoe1", "type": "purchase", "spent": 19.99, "amount": 80, "promotionIds": [], "suspicious": true, "remark": "", "createdBy": "alice666" }

When marking a transaction as suspicious (changing the flag from false to true), the amount should be immediately deducted from the user's points balance, which may result in a negative balance. Conversely, when verifying a transaction as not suspicious (changing the flag from true to false), the amount should be immediately credited to the user's points balance.

---

### /users/:userId/transactions

**Method:** POST  
**Description:** Create a new transfer transaction between the current logged-in user (sender) and the user specified by userId (the recipient)  
**Clearance:** Regular or higher  

**Payload:**  
Field  | Required | Type   | Description
------ | -------- | ------ | -------------------------------------------------------------
type   | Yes      | string | Must be "transfer"
amount | Yes      | number | The points amount to be transferred. Must be a positive integer value.
remark | No       | string | Any remark regarding this transaction

**Response:**
201 Created on success  

{ "id": 127, "sender": "johndoe1", "recipient": "friend69", "type": "transfer", "sent": 500, "remark": "Poker night", "createdBy": "johndoe1" }

400 Bad Request if the sender does not have enough points  
403 Forbidden if the sender is not verified  

Upon success, two transactions should be created: one for sending the amount and another for receiving it. For the sender, relatedId should be the user id of the recipient. For the receiver, relatedId should be the user id of the sender.

---

### /users/me/transactions

**Method:** POST  
**Description:** Create a new redemption transaction.  
**Clearance:** Regular or higher  

**Payload:**  
Field  | Required | Type   | Description
------ | -------- | ------ | -----------------------------------------------------
type   | Yes      | string | Must be "redemption"
amount | Yes      | number | The amount to redeem in this transaction. Must be a positive integer value.
remark | No       | string | Any remark regarding this transaction

**Response:**  
201 Created on success  

{ "id": 124, "utorid": "johndoe1", "type": "redemption", "processedBy": null, "amount": 1000, "remark": "", "createdBy": "johndoe1" }

400 Bad Request if the requested amount to redeem exceed the user's point balance.  
403 Forbidden if the logged-in user is not verified.  

A redemption transaction does not immediately deduct from the user's point balance. Instead, a cashier must process the redemption through PATCH /transactions/:transactionId/processed.

---

**Method:** GET  
**Description:** Retrieve a list of transactions owned by the currently logged in user  
**Clearance:** Regular or higher  

**Payload:**  
Field       | Required | Type    | Description
----------- | -------- | ------- | ------------------------------------------------------------------------------------------------
type        | No       | string  | Filter by transaction type
relatedId   | No       | number  | Filter by related ID (must be used with type)
promotionId | No       | number  | Filter by promotion applied to the transaction
amount      | No       | number  | Filter by point amount (must be used with operator)
operator    | No       | string  | One of "gte" (greater than or equal) or "lte" (less than or equal)
page        | No       | number  | Page number for pagination (default is 1)
limit       | No       | number  | Number of objects per page (default is 10)

**Response:**

{ "count": 21, "results": [ { "id": 123, "type": "purchase", "spent": 19.99, "amount": 80, "promotionIds": [], "remark": "", "createdBy": "alice666" }, { "id": 125, "amount": -40, "type": "adjustment", "relatedId": 123, "promotionIds": [], "remark": "", "createdBy": "smithw42" }, { "id": 127, "amount": -500, "type": "transfer", "relatedId": 35, "promotionIds": [], "remark": "Poker night", "createdBy": "johndoe1" } // More transaction objects... ] }


---

### /transactions/:transactionId/processed

**Method:** PATCH  
**Description:** Set a redemption transaction as being completed  
**Clearance:** Cashier or higher  

**Payload:**  
Field     | Required | Type    | Description
--------- | -------- | ------- | --------------------------------
processed | Yes      | boolean | Can only be true

**Response:**
200 OK on success  

{ "id": 124, "utorid": "johndoe1", "type": "redemption", "processedBy": "alice666", "redeemed": 1000, "remark": "", "createdBy": "johndoe1" }

400 Bad Request:
- If the transaction is not of type "redemption"
- If the transaction has already been processed

When marking a redemption transaction as processed (changing the flag from false to true), the amount should then be deducted from the user's points balance.

---

## /events

**Method:** POST  
**Description:** Create a new point-earning event.  
**Clearance:** Manager or higher  

**Payload:**  
Field      | Required | Type    | Description
---------- | -------- | ------- | ------------------------------------------------------------------------------------------------
name       | Yes      | string  | The name of the event
description| Yes      | string  | The description of the event
location   | Yes      | string  | The location of the event
startTime  | Yes      | string  | ISO 8601 format
endTime    | Yes      | string  | ISO 8601 format -- must be after startTime
capacity   | No       | number  | Must be a positive number, or null if there is no limit to the number of attendees
points     | Yes      | number  | Points allocated such that the organizers can distribute freely during the event. Must be a positive integer.

**Response:**
201 Created on success  

{ "id": 1, "name": "Event 1", "description": "A simple event", "location": "BA 2250", "startTime": "2025-05-10T09:00:00Z", "endTime": "2025-05-10T17:00:00Z", "capacity": 200, "pointsRemain": 500, "pointsAwarded": 0, "published": false, "organizers": [], "guests": [] }

Please see PATCH /events/:eventId for a list of possible errors.

---

**Method:** GET  
**Description:** Retrieve a list of events  
**Clearance:** Regular or higher  

**Payload:**  
Field      | Required | Type    | Description
---------- | -------- | ------- | ---------------------------------------------------------------------------
name       | No       | string  | Filter by name of the event
location   | No       | string  | Filter by location
started    | No       | boolean | Filter events that have started already (false would mean that the event has not started)
ended      | No       | boolean | Filter events that have ended already (false would mean that the event has not ended)
showFull   | No       | boolean | Show events that are full (default is false)
page       | No       | number  | Page number for pagination (default is 1)
limit      | No       | number  | Number of objects per page (default is 10)

**Response:** (200 OK on success)

{ "count": 2, "results": [ { "id": 1, "name": "Event 1", "location": "BA 2250", "startTime": "2025-05-10T09:00:00Z", "endTime": "2025-05-10T17:00:00Z", "capacity": 200, "numGuests": 0 } // More event objects... ] }

400 Bad Request when both started and ended are specified (it is never necessary to specify both started and ended).  

Note that regular users cannot see unpublished events.

---

**Method:** GET  
**Description:** Retrieve a list of events  
**Clearance:** Manager or higher  

**Payload:** (same as above, with these additional fields)  
Field     | Required | Type    | Description
--------- | -------- | ------- | -----------------------------------
published | No       | boolean | Filter events that are published (or not)

**Response:** (200 OK on success)

{ "count": 5, "results": [ { "id": 1, "name": "Event 1", "location": "BA 2250", "startTime": "2025-05-10T09:00:00Z", "endTime": "2025-05-10T17:00:00Z", "capacity": 200, "pointsRemain": 500, "pointsAwarded": 0, "published": false, "numGuests": 0 } // More event objects... ] }

Note that for both versions of GET /events, the descriptions of the returned events are omitted.

---

### /events/:eventId

**Method:** GET  
**Description:** Retrieve a single event  
**Clearance:** Regular or higher  

**Payload:** None  

**Response:** (200 OK on success)

{ "id": 1, "name": "Event 1", "description": "A simple event", "location": "BA 2250", "startTime": "2025-05-10T09:00:00Z", "endTime": "2025-05-10T17:00:00Z", "capacity": 200, "organizers": [ { "id": 1, "utorid": "johndoe1", "name": "John Doe" } ], "numGuests": 0 }

404 Not Found if the event is not published.  

A regular user cannot see all the information regarding an event, such as the points allocated to the event, or the list of guests, but can see the current number of guests that have RSVPed.

---

**Method:** GET  
**Description:** Retrieve a single event  
**Clearance:** Manager or higher, or an organizer for this event  

**Payload:** None  

**Response:**

{ "id": 1, "name": "Event 1", "description": "A simple event", "location": "BA 2250", "startTime": "2025-05-10T09:00:00Z", "endTime": "2025-05-10T17:00:00Z", "capacity": 200, "pointsRemain": 500, "pointsAwarded": 0, "published": false, "organizers": [ { "id": 1, "utorid": "johndoe1", "name": "John Doe" } ], "guests": [] }


---

**Method:** PATCH  
**Description:** Update an existing event.  
**Clearance:** Manager or higher, or an organizer for this event  

**Payload:**  
Field      | Required | Type    | Description
---------- | -------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name       | No       | string  | The name of the event
description| No       | string  | The description of the event
location   | No       | string  | The location of the event
startTime  | No       | string  | ISO 8601 format
endTime    | No       | string  | ISO 8601 format -- must be after startTime
capacity   | No       | number  | Must be a positive number, or null if there is no limit to the number of attendees
points     | No       | number  | Can only be set by managers: Points allocated such that the organizers can distribute freely during the event. Must be a positive integer.
published  | No       | boolean | Can only be set by managers: Make the event visible to others (including its organizers). Can only be set to true

**Response:** (the id, name and location shall always be returned. For others, only the field(s) updated will be returned)
200 OK on success  

{ "id": 1, "name": "Event 1", "location": "BA 2250", "published": true }

400 Bad Request:
- If start time or end time (or both) is in the past.
- If capacity is reduced, but the number of confirmed guests exceeds the new capacity.
- If the total amount of points is reduced, resulting in the remaining points allocated to the event falling below zero. Points already awarded to guests cannot be retracted through this API.
- If update(s) to name, description, location, startTime, or capacity is made after the original start time has passed.
- In addition to the above, if update to endTime is made after the original end time has passed.

---

**Method:** DELETE  
**Description:** Remove the specified event.  
**Clearance:** Manager or higher  

**Payload:** None  

**Response:**  
204 No Content on success  
400 Bad Request if the event has already been published

---

### /events/:eventId/organizers

**Method:** POST  
**Description:** Add an organizer to this event.  
**Clearance:** Manager or higher  

**Payload:**  
Field  | Required | Type   | Description
------ | -------- | ------ | -------------------------------------------------
utorid | Yes      | string | The utorid of the organizer (must have an account)

**Response:**  
201 Created on success  

{ "id": 1, "name": "Event 1", "location": "BA 2250", "organizers": [ { "id": 1, "utorid": "johndoe1", "name": "John Doe" }, { "id": 2, "utorid": "alice666", "name": "Alice Liddell" } ] }

400 Bad Request if the user is registered as a guest to the event (remove user as guest first, then retry)  
410 Gone if the event has ended

---

### /events/:eventId/organizers/:userId

**Method:** DELETE  
**Description:** Remove an organizer from this event.  
**Clearance:** Manager or higher  

**Payload:** None  

**Response:**  
204 No Content on success

---

### /events/:eventId/guests

**Method:** POST  
**Description:** Add a guest to this event.  
**Clearance:** Manager or higher, or an organizer for this event  

**Payload:**  
Field  | Required | Type   | Description
------ | -------- | ------ | ----------------------------------------------------------------
utorid | Yes      | string | The utorid of the guest to be added

**Response:**  
201 Created on success  

{ "id": 1, "name": "Event 1", "location": "BA 2250", "guestAdded": { "id": 3, "utorid": "jacksun0", "name": "Jack Sun" }, "numGuests": 1 }

400 Bad Request if the user is registered as an organizer (remove user as organizer first, then retry)  
404 Not Found if the event is not visible to the organizer yet  
410 Gone if the event is full or has ended

---

### /events/:eventId/guests/:userId

**Method:** DELETE  
**Description:** Remove a guest from this event.  
**Clearance:** Manager or higher (not organizers for this event)  

**Payload:** None  

**Response:**  
204 No Content on success

---

### /events/:eventId/guests/me

**Method:** POST  
**Description:** Add the logged-in user to the event  
**Clearance:** Regular  

**Payload:** None  

**Response:**  
201 Created on success  

{ "id": 1, "name": "Event 1", "location": "BA 2250", "guestAdded": { "id": 4, "utorid": "kian1234", "name": "Mo Kian" }, "numGuests": 1 }

400 Bad Request if the user is already on the guest list  
410 Gone if the event is full or has ended  

Only the currently logged-in user should appear in the array.

---

**Method:** DELETE  
**Description:** Remove the logged-in user from this event.  
**Clearance:** Regular  

**Payload:** None  

**Response:**  
204 No Content on success  
404 Not Found if the user did not RSVP to this event  
410 Gone if the event has ended

---

### /events/:eventId/transactions

**Method:** POST  
**Description:** Create a new reward transaction  
**Clearance:** Manager or higher, or an organizer for this event  

**Payload:**  
Field  | Required | Type   | Description
------ | -------- | ------ | --------------------------------------------------------------------------
type   | Yes      | string | Must be "event"
utorid | No       | string | The utorid of the guest to award the points. If utorid is not specified, amount is awarded to all guests
amount | Yes      | number | Points to award to the guest. Must be a positive integer value.

**Response:**  
201 Created on success (when utorid is specified)  

{ "id": 132, "recipient": "johndoe1", "awarded": 200, "type": "event", "relatedId": 1, "remark": "Trivia winner", "createdBy": "alice666" }

201 Created on success (when utorid is not specified)  

[ { "id": 201, "recipient": "reidk129", "awarded": 100, "type": "event", "relatedId": 3, "remark": "meditation session", "createdBy": "alice666" }, { "id": 202, "recipient": "craigm34", "awarded": 100, "type": "event", "relatedId": 3, "remark": "meditation session", "createdBy": "alice666" }, { "id": 203, "recipient": "campj768", "awarded": 100, "type": "event", "relatedId": 3, "remark": "meditation session", "createdBy": "alice666" } ]

400 Bad Request:
- If the user is not on the guest list (even if the capacity is unlimited)
- If the remaining points is less than the requested amount.

Awarding points to guests can be done after an event has ended. After this transaction is created, the points are awarded to the user immediately.

Points can be awarded to the same guest multiple times without restriction.

---

## /promotions

**Method:** POST  
**Description:** Create a new promotion.  
**Clearance:** Manager or higher  

**Payload:**  
Field       | Required | Type    | Description
----------- | -------- | ------- | ------------------------------------------------------------------------------------------------------------
name        | Yes      | string  | The name of the promotion
description | Yes      | string  | The description of the promotion
type        | Yes      | string  | Either "automatic" or "one-time"
startTime   | Yes      | string  | ISO 8601 format. Must not be in the past.
endTime     | Yes      | string  | ISO 8601 format. Must be after startTime
minSpending | No       | number  | The minimum spending required to trigger the promotion. Must be a positive numeric value.
rate        | No       | number  | The promotional rate (on top of the existing rate). Must be a positive numeric value.
points      | No       | number  | The promotional points, added to qualifying purchase transaction. Must be a positive integer value.

**Response:**  
201 Created on success  

{ "id": 3, "name": "Start of Summer Celebration", "description": "A simple promotion", "type": "automatic", "startTime": "2025-05-10T09:00:00Z", "endTime": "2025-05-10T17:00:00Z", "minSpending": 50, "rate": 0.01, "points": 0 }


---

**Method:** GET  
**Description:** Retrieve a list of promotions  
**Clearance:** Regular or higher  

**Payload:**  
Field | Required | Type   | Description
----- | -------- | ------ | -------------------------------------------------
name  | No       | string | Filter by name of the promotion
type  | No       | string | Filter by type (either "automatic" or "one-time")
page  | No       | number | Page number for pagination (default is 1)
limit | No       | number | Number of objects per page (default is 10)

**Response:** (200 OK on success)

{ "count": 3, "results": [ { "id": 3, "name": "Start of Summer Celebration", "type": "automatic", "endTime": "2025-05-10T17:00:00Z", "minSpending": 50, "rate": 0.01, "points": 0 } // More event objects... ] }

A regular user may only see available promotions, i.e., active promotions that they have not used. An active promotion is one that has started, but not ended.

---

**Method:** GET  
**Description:** Retrieve a list of promotions  
**Clearance:** Manager or higher  

**Payload:** (on top of the fields above)  
Field   | Required | Type    | Description
------- | -------- | ------- | --------------------------------------------------------------------------------
started | No       | boolean | Filter promotions that have started already (false would mean that the event has not started)
ended   | No       | boolean | Filter promotions that have ended already (false would mean that the event has not ended)

**Response:** (200 OK on success)

{ "count": 3, "results": [ { "id": 3, "name": "Start of Summer Celebration", "type": "automatic", "startTime": "2025-05-10T09:00:00Z", "endTime": "2025-05-10T17:00:00Z", "minSpending": 50, "rate": 0.01, "points": 0 } // More event objects... ] }

400 Bad Request when both started and ended are specified (it is never necessary to specify both started and ended).

Note that for both versions of GET /promotions, the descriptions of the returned promotions are omitted.

---

### /promotions/:promotionId

**Method:** GET  
**Description:** Retrieve a single event  
**Clearance:** Regular or higher  

**Payload:** None  

**Response:** (200 OK on success)

{ "id": 3, "name": "Start of Summer Celebration", "description": "A simple promotion", "type": "automatic", "endTime": "2025-05-10T17:00:00Z", "minSpending": 50, "rate": 0.01, "points": 0 }

404 Not Found if the promotion is currently inactive (not started yet, or have ended).

---

**Method:** GET  
**Description:** Retrieve a single event  
**Clearance:** Manager or higher  

**Payload:** None  

**Response:** (200 OK on success)


{ "id": 3, "name": "Start of Summer Celebration", "description": "A simple promotion", "type": "automatic", "startTime": "2025-05-10T09:00:00Z", "endTime": "2025-05-10T17:00:00Z", "minSpending": 50, "rate": 0.01,
"points": 0 }


---

**Method:** PATCH  
**Description:** Update an existing promotion.  
**Clearance:** Manager or higher  

**Payload:**  
Field       | Required | Type    | Description
----------- | -------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------
name        | No       | string  | The name of the event
description | No       | string  | The description of the promotion
type        | No       | string  | Either "automatic" or "one-time"
startTime   | No       | string  | ISO 8601 format
endTime     | No       | string  | ISO 8601 format. Must be after startTime
minSpending | No       | number  | The minimum spending required to trigger the promotion. Must be a positive numeric value.
rate        | No       | number  | The promotional rate (on top of the existing rate). Must be a positive numeric value.
points      | No       | number  | The promotional points, added to qualifying purchase transaction. Must be a positive integer value.

**Response:** (The id, name and type, shall always be returned. For others, only the field(s) updated will be returned)
200 OK on success  

{ "id": 3, "name": "Start of Summer Celebration", "type": "automatic", "endTime": "2025-05-20T17:00:00Z" }

400 Bad Request:
- If start time or end time (or both) is in the past.
- If update(s) to name, description, type, startTime, minSpending, rate, or points is made after the original start time has passed.
- In addition to the above, if update to endTime is made after the original end time has passed.

---

**Method:** DELETE  
**Description:** Remove the specified promotion.  
**Clearance:** Manager or higher  

**Payload:** None  

**Response:**  
204 No Content on success  
403 Forbidden if the promotion has already started.
